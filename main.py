import networkx as nx
import matplotlib.pyplot as plt
import time

# Define DFS algorithm
def DFS(graph, start_node):
    visited = []
    stack = [start_node]
    while stack:
        node = stack.pop()
        if node not in visited:
            visited.append(node)
            stack.extend([n for n in graph.neighbors(node) if n not in visited])
    return visited

# Define BFS algorithm
def BFS(graph, start_node):
    visited = []
    queue = [start_node]
    while queue:
        node = queue.pop(0)
        if node not in visited:
            visited.append(node)
            queue.extend([n for n in graph.neighbors(node) if n not in visited])
    return visited

# Measure the execution time of DFS and BFS algorithms for graphs of different sizes
dfs_times = []
bfs_times = []
node_counts = range(10, 110, 10)
for n in node_counts:
    graph = nx.gnp_random_graph(n, 0.1)

    start_time = time.time()
    DFS(graph, 0)
    end_time = time.time()
    dfs_times.append(end_time - start_time)

    start_time = time.time()
    BFS(graph, 0)
    end_time = time.time()
    bfs_times.append(end_time - start_time)

# Plot the execution times of DFS and BFS algorithms as a function of the number of nodes
plt.plot(node_counts, dfs_times, 'r-', label='DFS')
plt.plot(node_counts, bfs_times, 'b-', label='BFS')
plt.xlabel('Number of nodes')
plt.ylabel('Execution time (seconds)')
plt.title('DFS vs. BFS')
plt.legend()
plt.show()

# Generate a graph with 100 nodes and plot the trees generated by DFS and BFS algorithms
G = nx.gnp_random_graph(100, 0.1)

# Compute DFS tree
dfs_tree = nx.dfs_tree(G, 0)

# Compute BFS tree
bfs_tree = nx.bfs_tree(G, 0)

# Plot the original graph and the DFS and BFS trees
fig, ax = plt.subplots(1, 3, figsize=(12, 4))
pos = nx.spring_layout(G)
nx.draw_networkx(G, pos, ax=ax[0], with_labels=True)
ax[0].set_title('Original graph')
nx.draw_networkx(dfs_tree, pos, ax=ax[1], with_labels=True)
ax[1].set_title('DFS tree')
nx.draw_networkx(bfs_tree, pos, ax=ax[2], with_labels=True)
ax[2].set_title('BFS tree')
plt.show()
